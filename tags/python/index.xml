<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>python on Elyézer Rezende</title><link>https://elyezer.com/tags/python/</link><description>Recent content in python on Elyézer Rezende</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 07 Jun 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://elyezer.com/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Running UI tests on Travis</title><link>https://elyezer.com/posts/running-ui-tests-on-travis/</link><pubDate>Thu, 07 Jun 2018 00:00:00 +0000</pubDate><guid>https://elyezer.com/posts/running-ui-tests-on-travis/</guid><description>Travis allows you to run Chrome and Firefox on their build environment and those can be used to run UI tests using Selenium.
Today we are going to see how to install chromedriver and geckodriver in order to be able to run UI tests using pytest-selenium. To run those tests you will need to have your web application running so that Travis can access it and this article won&amp;rsquo;t cover that.</description></item><item><title>Using a C shared library with Python's ctypes module</title><link>https://elyezer.com/posts/using-a-c-shared-library-with-python-ctypes-module/</link><pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate><guid>https://elyezer.com/posts/using-a-c-shared-library-with-python-ctypes-module/</guid><description>To demonstrate how to create a shared C library and using it with Python&amp;rsquo;s ctypes library we are going to create a shared C library. First create the C header file mean.h:
// Returns the mean of passed parameters double mean(double, double); Next create the C file mean.c:
#include &amp;#34;mean.h&amp;#34; double mean(double a, double b) { return (a+b)/2; } Now we can create the shared C library by compiling it using gcc:</description></item><item><title>Building and Distributing Packages with Setuptools</title><link>https://elyezer.com/posts/building-and-distributing-packages-with-setuptools/</link><pubDate>Tue, 26 Nov 2013 13:00:56 +0000</pubDate><guid>https://elyezer.com/posts/building-and-distributing-packages-with-setuptools/</guid><description>How to create and distribute Python packages with Setuptools</description></item><item><title>Create and use a shared library using Python's ctypes module</title><link>https://elyezer.com/posts/create-and-use-a-shared-library-using-pythons/</link><pubDate>Tue, 22 Oct 2013 12:00:56 +0000</pubDate><guid>https://elyezer.com/posts/create-and-use-a-shared-library-using-pythons/</guid><description/></item><item><title>Diferença entre == e is no Python</title><link>https://elyezer.com/posts/pt-br/diferenca-entre-e-is-no-python/</link><pubDate>Thu, 21 Mar 2013 23:28:00 -0300</pubDate><guid>https://elyezer.com/posts/pt-br/diferenca-entre-e-is-no-python/</guid><description>Uma dúvida comum aos que estão iniciando os estudos em Python é a diferença entre os operadores == e is, nesse post vamos estudar um pouco mais sobre eles.
De forma resumida, o operador == analisa se os valores de dois objetos são iguais, já o operador is verifica se os dois objetos são o mesmo objeto.
Assumindo a definição de cada operador, como explicar a seguinte situação:
&amp;gt;&amp;gt;&amp;gt; n = 5 &amp;gt;&amp;gt;&amp;gt; n == 5 True &amp;gt;&amp;gt;&amp;gt; n is 5 True &amp;gt;&amp;gt;&amp;gt; l = [1] &amp;gt;&amp;gt;&amp;gt; l == [1] True &amp;gt;&amp;gt;&amp;gt; l is [1] False No primeiro teste, estamos utilizando objeto do tipo int já no segundo estamos utilizando objeto do tipo list.</description></item><item><title>Fazendo o deploy de uma aplicação Flask no Dreamhost</title><link>https://elyezer.com/posts/pt-br/fazendo-o-deploy-de-uma-aplicacao-flask-no-dreamhost/</link><pubDate>Thu, 28 Jun 2012 00:00:00 -0300</pubDate><guid>https://elyezer.com/posts/pt-br/fazendo-o-deploy-de-uma-aplicacao-flask-no-dreamhost/</guid><description>Recentemente realizei um projeto onde utilizei o Flask como framework web. A decisão de usar o Flask no lugar do Django foi devido ao site não precisar de muitos dos recursos que o Django oferece por ser um framework fullstack. Por outro lado, o Flask é um microframework que oferece alguns recursos como:
Excelente documentação Utiliza o Jinja2 para os templates Um servidor para desenvolvimento e debug Suporte integrado à unit tests Nesse post veremos como fazer o deploy de uma aplicação Flask no Dreamhost.</description></item><item><title>Fazendo o deploy de uma aplicação Django no Dreamhost</title><link>https://elyezer.com/posts/pt-br/fazendo-o-deploy-de-uma-aplicacao-django-no-dreamhost/</link><pubDate>Thu, 22 Dec 2011 12:00:00 -0300</pubDate><guid>https://elyezer.com/posts/pt-br/fazendo-o-deploy-de-uma-aplicacao-django-no-dreamhost/</guid><description>No post anterior, foi mostrado como instalar uma versão mais recende do Python e do Django no Dreamhost. Nesse post será demonstrado como fazer o deploy de uma aplicação Django utilizando o virtualenv.
O Dreamhost utiliza o Passenger WSGI para servir aplicações escritas em Python, por isso, o processo aqui descrito é referente ao deploy utilizando o Passenger WSGI.
Configuração do domínio O primeiro passo é configurar um domínio para fazer o deploy da aplicação.</description></item><item><title>Instalação do Python 2.7.2 e Django 1.3.1 no Dreamhost</title><link>https://elyezer.com/posts/pt-br/instalacao-do-python-2-7-2-e-django-1-3-1-no-dreamhost/</link><pubDate>Mon, 12 Dec 2011 20:00:00 -0300</pubDate><guid>https://elyezer.com/posts/pt-br/instalacao-do-python-2-7-2-e-django-1-3-1-no-dreamhost/</guid><description>Em servidores compartilhados normalmente não é possível ter a versão do Python ou mesmo do Django de acordo com as necessidades do projeto. Porém, tendo um acesso SSH, é possível instalar, no diretório home, a versão requerida para rodar o projeto.
Como exemplo, será demonstrado como instalar uma versão do Python e do Django diferente da oferecida pelo serviço de hospedagem compartilhada do Dreamhost. No momento da escrita do post as versões do Python e do Django oferecidas são, respectivamente, 2.</description></item><item><title>Python para Desenvolvedores - Segunda Edição</title><link>https://elyezer.com/posts/pt-br/python-para-desenvolvedores-segunda-edicao/</link><pubDate>Tue, 19 Jan 2010 14:16:00 -0300</pubDate><guid>https://elyezer.com/posts/pt-br/python-para-desenvolvedores-segunda-edicao/</guid><description>A segunda edição do livro Python para Desenvolvedores de Luiz Eduardo Borges está disponível para download. Confira a nota de lançamento:
A segunda edição do livro (ISBN 978-85-909451-1-6, 360 páginas), voltado para desenvolvedores que já tem conhecimento de programação, incluindo desde a criação de interfaces com usuário, computação gráfica, aplicações para internet e sistemas distribuídos.
Você pode fazer o download ou ir para a página oficial.
Boa leitura!</description></item></channel></rss>